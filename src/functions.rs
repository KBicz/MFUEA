use libm::{exp,erf};
use crate::scaledatamf::re_param;

pub const PI: f64 = 3.14159265358979323846264338327950288f64;

pub fn printparams(s: &(Vec<Vec<Vec<f64>>>,Vec<Vec<f64>>), nmainparams: usize, paramp: &Vec<f64>, vmin: f64, vmax: f64)
{
    let names: Vec<&str> = {
        match nmainparams
        {
            7 => { vec!["A","B","C","D"] },
            10 => { vec!["A1","B ","C1","D1","A2","C2","D2"] },
            11 => { vec!["A1","B1","C1","D1","A2","B2","C2","D2"] },
            _ => { std::process::exit(1); },
        }
    };

    let (mut errmin, mut errmax): (Vec<f64>, Vec<f64>) = (vec![0.0; nmainparams-3], vec![0.0; nmainparams-3]);
    for i in 0..nmainparams-3
    {
        errmin[i] = s.1[i+1].iter().fold(f64::INFINITY, |a, &b| a.min(b));
        errmax[i] = s.1[i+1].iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b));
    }

    errmin = re_param(&errmin, vmin, vmax);
    errmax = re_param(&errmax, vmin, vmax);

    for i in 0..nmainparams-3
    {
        println!("> {} = {} + {} - {}",names[i], paramp[i], (paramp[i]-errmax[i]).abs(),(paramp[i]-errmin[i]).abs());
    }
}

pub fn profil_wroclawski_2b(t: &Vec<f64>, a1: f64, b1: f64, c1: f64, d1: f64, a2: f64, b2: f64, c2: f64, d2: f64) -> Vec<f64>
{
    let (a1, b1, c1, d1) = (a1.abs(), b1.abs(), c1.abs(), d1.abs());
    let (a2, b2, c2, d2) = (a2.abs(), b2.abs(), c2.abs(), d2.abs());
    let (mut th1,mut th2,mut f11,mut f12,mut f21,mut f22);
    let mut flare: Vec<f64> = vec![0f64;t.len()];
    let (om1, om2) = (c1*d1/2.0_f64,c2*d2/2.0_f64);
    let (mut val1, mut val2) = (1f64,1f64);

    if b1/c1+(c1*d1)/2. < 2.0 {val1 = erf(b1/c1+(c1*d1)/2.);}
    if b2/c2+(c2*d2)/2. < 2.0 {val2 = erf(b2/c2+(c2*d2)/2.);}

    for i in 0..t.len()
    {
        th1 = (t[i]-b1)/c1;
        th2 = (t[i]-b2)/c2;
        
        if (-2.0*om1*th1+om1.powf(2.0)).abs() > 650f64 || (-2.0*om2*th2+om2.powf(2.0)).abs() > 650f64 {return vec![0f64; t.len()];} 
        f11 = 0.5*PI.powf(0.5)*a1*c1*exp(-2.0*om1*th1+om1.powf(2.0));
        f12 = 0.5*PI.powf(0.5)*a2*c2*exp(-2.0*om2*th2+om2.powf(2.0));

        f21 = val1 + erf(th1-om1);
        f22 = val2 + erf(th2-om2);
        flare[i] = (f11*f21).abs() + (f12*f22).abs();
    }

    return flare;
}

pub fn profil_wroclawski_1b(t: &Vec<f64>, a1: f64, b: f64, c1: f64, d1: f64, a2: f64, c2: f64, d2: f64) -> Vec<f64>
{
    let (a1, b, c1, d1) = (a1.abs(), b.abs(), c1.abs(), d1.abs());
    let (a2, c2, d2) = (a2.abs(), c2.abs(), d2.abs());
    let (mut th1,mut th2,mut f11,mut f12,mut f21,mut f22);
    let mut flare: Vec<f64> = vec![0f64;t.len()];
    let (om1, om2) = (c1*d1/2.0_f64,c2*d2/2.0_f64);
    let (mut val1, mut val2) = (1f64, 1f64);

    if b/c1+(c1*d1)/2. < 2.0 {val1 = erf(b/c1+(c1*d1)/2.);}
    if b/c2+(c2*d2)/2. < 2.0 {val2 = erf(b/c2+(c2*d2)/2.);}

    for i in 0..t.len()
    {
        th1 = (t[i]-b)/c1;
        th2 = (t[i]-b)/c2;

        if (-2.0*om1*th1+om1.powf(2.0)).abs() > 650f64 || (-2.0*om2*th2+om2.powf(2.0)).abs() > 650f64 {return vec![0f64; t.len()];} 
        f11 = 0.5*PI.powf(0.5)*a1*c1*exp(-2.0*om1*th1+om1.powf(2.0));
        f12 = 0.5*PI.powf(0.5)*a2*c2*exp(-2.0*om2*th2+om2.powf(2.0));

        f21 = val1 + erf(th1-om1);
        f22 = val2 + erf(th2-om2);
        flare[i] = (f11*f21).abs() + (f12*f22).abs();
    }

    return flare;
}

pub fn profil_wroclawski(t: &Vec<f64>, a: f64, b: f64, c: f64, d: f64) -> Vec<f64>
{
    let (a, b, c, d) = (a.abs(), b.abs(), c.abs(), d.abs());
    let (mut th1,mut f11,mut f21);
    let mut flare: Vec<f64> = vec![0f64;t.len()];
    let (om1, mut val1) = (c*d/2f64,1f64);

    if b/c+(c*d)/2.0 < 2.0 {val1 = erf(b/c+(c*d)/2.0);}

    for i in 0..t.len()
    {
        th1 = (t[i]-b)/c;
        if (-2.0*om1*th1+om1.powf(2.0)).abs() > 600f64 {return vec![0f64; t.len()];} 
        
        f11 = 0.5*PI.powf(0.5)*a*c*exp(-2.0*om1*th1+om1.powf(2.0));
        f21 = val1 + erf(th1-om1);
        flare[i] = (f11*f21).abs();
    }

    return flare;
}

pub fn alpha(lat: f64, lon0: f64, inc: f64, tbar: &Vec<f64>, profile: &Vec<f64>, fitprof: bool, coeffs: &Vec<f64>) -> Vec<f64>
{
    let mut alpha: f64;
    let mut result: Vec<f64> = vec![];

    for i in 0..tbar.len()
    {
        alpha = (lat.to_radians()).sin()*(inc.to_radians()).cos() + (lat.to_radians()).cos()*(inc.to_radians()).sin()*(lon0.to_radians()-tbar[i]).cos();
        if coeffs[0] == 0.0 && coeffs[1] == 0.0 {result.push(alpha*profile[i]);}
        else {result.push(alpha*profile[i]/limb_darkening(coeffs, alpha));}
        if alpha < 0.0 {result[i] = 0.0;}
    }

    if !fitprof
    {
        let r: f64 = result.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b));
        if r != 0.0
        {
            let val:f64 = profile.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b))/r; 
            result.iter_mut().for_each(|x| *x *= val);
        }
        else
        {
            result.iter_mut().for_each(|x| *x *= 0.0);
        }
    }

    result
}

pub fn alpha_area(lats: &Vec<f64>, lons: &Vec<f64>, inc: f64, tbar: &Vec<f64>, fitprof: bool, influence: &Vec<f64>, profile: &Vec<f64>, coeffs: &Vec<f64>) -> Vec<f64>
{
    let (mut alpha, mut _ld): (f64, f64);
    let mut result: Vec<f64> = vec![0.0; profile.len()];

    for j in 0..lats.len()
    {
        for i in 0..tbar.len()
        {
            alpha = (lats[j].to_radians()).sin()*(inc.to_radians()).cos() + (lats[j].to_radians()).cos()*(inc.to_radians()).sin()*(lons[j].to_radians()-tbar[i]).cos();
            if alpha < 0.0 { result[i] += 0.0; }
            else
            {
                if coeffs[0] == 0.0 && coeffs[1] == 0.0  { result[i] += alpha*profile[i]*influence[j]; }
                else { result[i] += alpha*profile[i]/limb_darkening(coeffs, alpha)*influence[j]; }
            }
        }
    }

    if !fitprof
    {
        let r: f64 = result.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b));
        if r != 0.0
        {
            let val:f64 = profile.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b))/r; 
            result.iter_mut().for_each(|x| *x *= val);
        }
        else
        {
            result.iter_mut().for_each(|x| *x *= 0.0);
        }
    }

    result
}

pub fn limb_darkening(coeffs: &Vec<f64>, alphav: f64) -> f64
{
    if alphav > 0.0 { 1.0 - coeffs[1]*(1.0-alphav)+coeffs[0]*(1.0-alphav).powf(2.0) }
    else { 10000000.0 }

}

pub fn limbd_coeffs(logg: f64, tstar: f64) -> (f64, f64)
{
    let grav: Vec<f64> = 
    vec![2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00, 2.50, 3.00, 3.50, 4.00, 4.50, 5.00, 5.50, 6.00];
    let teff: Vec<f64> = vec![1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1700.0, 1700.0, 1700.0, 1700.0, 1700.0, 1700.0, 1700.0, 1800.0, 1800.0, 1800.0, 1800.0, 1800.0, 1800.0, 1800.0, 1900.0, 1900.0, 1900.0, 1900.0, 1900.0, 1900.0, 1900.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2100.0, 2100.0, 2100.0, 2100.0, 2100.0, 2100.0, 2100.0, 2200.0, 2200.0, 2200.0, 2200.0, 2200.0, 2200.0, 2200.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1500.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1700.0, 1700.0, 1700.0, 1700.0, 1700.0, 1700.0, 1700.0, 1800.0, 1800.0, 1800.0, 1800.0, 1800.0, 1800.0, 1800.0, 1900.0, 1900.0, 1900.0, 1900.0, 1900.0, 1900.0, 1900.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2000.0, 2100.0, 2100.0, 2100.0, 2100.0, 2100.0, 2100.0, 2100.0, 2200.0, 2200.0, 2200.0, 2200.0, 2200.0, 2200.0, 2200.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2300.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2400.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2500.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2600.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2700.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2800.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 2900.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 3000.0, 3100.0, 3100.0, 3100.0, 3100.0, 3100.0, 3100.0, 3100.0, 3100.0, 3200.0, 3200.0, 3200.0, 3200.0, 3200.0, 3200.0, 3200.0, 3200.0, 3300.0, 3300.0, 3300.0, 3300.0, 3300.0, 3300.0, 3300.0, 3300.0, 3400.0, 3400.0, 3400.0, 3400.0, 3400.0, 3400.0, 3400.0, 3400.0, 3500.0, 3500.0, 3500.0, 3500.0, 3500.0, 3500.0, 3500.0, 3500.0, 3600.0, 3600.0, 3600.0, 3600.0, 3600.0, 3600.0, 3600.0, 3600.0, 3700.0, 3700.0, 3700.0, 3700.0, 3700.0, 3700.0, 3700.0, 3700.0, 3800.0, 3800.0, 3800.0, 3800.0, 3800.0, 3800.0, 3800.0, 3800.0, 3900.0, 3900.0, 3900.0, 3900.0, 3900.0, 3900.0, 3900.0, 3900.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4000.0, 4100.0, 4100.0, 4100.0, 4100.0, 4100.0, 4100.0, 4100.0, 4100.0, 4200.0, 4200.0, 4200.0, 4200.0, 4200.0, 4200.0, 4200.0, 4200.0, 4300.0, 4300.0, 4300.0, 4300.0, 4300.0, 4300.0, 4300.0, 4300.0, 4400.0, 4400.0, 4400.0, 4400.0, 4400.0, 4400.0, 4400.0, 4400.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4600.0, 4600.0, 4600.0, 4600.0, 4600.0, 4600.0, 4600.0, 4600.0, 4700.0, 4700.0, 4700.0, 4700.0, 4700.0, 4700.0, 4700.0, 4700.0, 4800.0, 4800.0, 4800.0, 4800.0, 4800.0, 4800.0, 4800.0, 4800.0, 4900.0, 4900.0, 4900.0, 4900.0, 4900.0, 4900.0, 4900.0, 4900.0, 5100.0, 5100.0, 5100.0, 5100.0, 5100.0, 5100.0, 5100.0, 5100.0, 5200.0, 5200.0, 5200.0, 5200.0, 5200.0, 5200.0, 5200.0, 5200.0, 5300.0, 5300.0, 5300.0, 5300.0, 5300.0, 5300.0, 5300.0, 5300.0, 5400.0, 5400.0, 5400.0, 5400.0, 5400.0, 5400.0, 5400.0, 5400.0, 5500.0, 5500.0, 5500.0, 5500.0, 5500.0, 5500.0, 5500.0, 5500.0, 5600.0, 5600.0, 5600.0, 5600.0, 5600.0, 5600.0, 5600.0, 5600.0, 5700.0, 5700.0, 5700.0, 5700.0, 5700.0, 5700.0, 5700.0, 5700.0, 5800.0, 5800.0, 5800.0, 5800.0, 5800.0, 5800.0, 5800.0, 5800.0, 5900.0, 5900.0, 5900.0, 5900.0, 5900.0, 5900.0, 5900.0, 5900.0, 6000.0, 6000.0, 6000.0, 6000.0, 6000.0, 6000.0, 6000.0, 6000.0, 6100.0, 6100.0, 6100.0, 6100.0, 6100.0, 6100.0, 6100.0, 6100.0, 6200.0, 6200.0, 6200.0, 6200.0, 6200.0, 6200.0, 6200.0, 6200.0, 6300.0, 6300.0, 6300.0, 6300.0, 6300.0, 6300.0, 6300.0, 6300.0, 6400.0, 6400.0, 6400.0, 6400.0, 6400.0, 6400.0, 6400.0, 6400.0, 6500.0, 6500.0, 6500.0, 6500.0, 6500.0, 6500.0, 6500.0, 6500.0, 6600.0, 6600.0, 6600.0, 6600.0, 6600.0, 6600.0, 6600.0, 6600.0, 6700.0, 6700.0, 6700.0, 6700.0, 6700.0, 6700.0, 6700.0, 6700.0, 6800.0, 6800.0, 6800.0, 6800.0, 6800.0, 6800.0, 6800.0, 6800.0, 6900.0, 6900.0, 6900.0, 6900.0, 6900.0, 6900.0, 6900.0, 6900.0, 7000.0, 7000.0, 7000.0, 7000.0, 7000.0, 7000.0, 7000.0, 7000.0, 7200.0, 7200.0, 7200.0, 7200.0, 7200.0, 7200.0, 7200.0, 7200.0, 7400.0, 7400.0, 7400.0, 7400.0, 7400.0, 7400.0, 7400.0, 7400.0, 7600.0, 7600.0, 7600.0, 7600.0, 7600.0, 7600.0, 7600.0, 7600.0, 7800.0, 7800.0, 7800.0, 7800.0, 7800.0, 7800.0, 7800.0, 7800.0, 8000.0, 8000.0, 8000.0, 8000.0, 8000.0, 8000.0, 8000.0, 8000.0, 8200.0, 8200.0, 8200.0, 8200.0, 8200.0, 8200.0, 8200.0, 8200.0, 8400.0, 8400.0, 8400.0, 8400.0, 8400.0, 8400.0, 8400.0, 8400.0, 8600.0, 8600.0, 8600.0, 8600.0, 8600.0, 8600.0, 8600.0, 8600.0, 8800.0, 8800.0, 8800.0, 8800.0, 8800.0, 8800.0, 8800.0, 8800.0, 9000.0, 9000.0, 9000.0, 9000.0, 9000.0, 9000.0, 9000.0, 9000.0, 9200.0, 9200.0, 9200.0, 9200.0, 9200.0, 9200.0, 9200.0, 9200.0, 9400.0, 9400.0, 9400.0, 9400.0, 9400.0, 9400.0, 9400.0, 9400.0, 9600.0, 9600.0, 9600.0, 9600.0, 9600.0, 9600.0, 9600.0, 9600.0, 9800.0, 9800.0, 9800.0, 9800.0, 9800.0, 9800.0, 9800.0, 9800.0,10000.0,10000.0,10000.0,10000.0,10000.0,10000.0,10000.0,10000.0,10200.0,10200.0,10200.0,10200.0,10200.0,10200.0,10200.0,10200.0,10400.0,10400.0,10400.0,10400.0,10400.0,10400.0,10400.0,10400.0,10600.0,10600.0,10600.0,10600.0,10600.0,10600.0,10600.0,10600.0,10800.0,10800.0,10800.0,10800.0,10800.0,10800.0,10800.0,10800.0,11000.0,11000.0,11000.0,11000.0,11000.0,11000.0,11000.0,11000.0,11200.0,11200.0,11200.0,11200.0,11200.0,11200.0,11200.0,11200.0,11400.0,11400.0,11400.0,11400.0,11400.0,11400.0,11400.0,11400.0,11600.0,11600.0,11600.0,11600.0,11600.0,11600.0,11600.0,11600.0,11800.0,11800.0,11800.0,11800.0,11800.0,11800.0,11800.0,11800.0,12000.0,12000.0,12000.0,12000.0,12000.0,12000.0,12000.0,12000.0];
    let u2: Vec<f64> = vec![-0.3807,-0.3121,-0.3686,-0.4786,-1.0014,-0.7874,-0.4997,-0.2535,-0.1913,-0.2481,-0.2615,-0.3375,-0.3503,-0.4091,-0.1149,-0.1511,-0.1822,-0.1922,-0.1490,-0.1692,-0.2599,-0.1193,-0.0864,-0.1134,-0.1253,-0.1483,-0.1269,-0.1252,-0.0793,-0.0851,-0.1418,-0.1793,-0.1122,-0.0914,-0.0561,-0.0248,-0.0776,-0.0782,-0.1024,-0.1341,-0.0995,-0.0370, 0.0242,-0.0304,-0.1157,-0.0879,-0.0981,-0.0787,-0.0305, 0.1277, 0.1185,-0.0296,-0.0571,-0.0352,-0.0649,-0.0396, 0.2018, 0.1448, 0.1386, 0.0203, 0.0475, 0.0435, 0.0489, 0.3839, 0.3147, 0.2664, 0.2213, 0.1349, 0.1457, 0.0899, 0.4127, 0.4498, 0.4019, 0.3319, 0.2812, 0.2237, 0.1784, 0.4029, 0.4643, 0.4824, 0.4428, 0.3867, 0.3167, 0.2777, 0.4409, 0.4811, 0.5375, 0.5307, 0.4854, 0.4258, 0.3482, 0.4706, 0.4938, 0.5648, 0.5756, 0.5487, 0.4989, 0.4199, 0.4902, 0.5069, 0.5660, 0.5866, 0.5775, 0.5507, 0.4793, 0.4951, 0.5100, 0.5531, 0.5705, 0.5751, 0.5698, 0.5280,-0.4088,-0.3291,-0.3806,-0.4584,-0.8438,-0.7052,-0.4650,-0.3028,-0.2399,-0.2799,-0.2817,-0.3359,-0.3414,-0.3897,-0.1770,-0.2038,-0.2221,-0.2192,-0.1666,-0.1773,-0.2561,-0.1921,-0.1336,-0.1466,-0.1496,-0.1655,-0.1377,-0.1282,-0.1069,-0.1289,-0.1690,-0.1930,-0.1216,-0.1027,-0.0623,-0.0652,-0.1052,-0.1086,-0.1222,-0.1502,-0.1096,-0.0436,-0.0008,-0.0710,-0.1434,-0.1143,-0.1152,-0.0905,-0.0383,-0.0339, 0.0562,-0.0663,-0.0923,-0.0652,-0.0788,-0.0458, 0.0193, 0.0033, 0.0481,-0.0167, 0.0137, 0.0221, 0.0388, 0.1878, 0.1551, 0.1552, 0.1559, 0.1027, 0.1217, 0.0745, 0.3120, 0.3380, 0.3164, 0.2691, 0.2399, 0.2004, 0.1633, 0.2600, 0.3708, 0.4610, 0.4223, 0.3686, 0.3053, 0.2715, 0.2924, 0.3833, 0.4837, 0.5022, 0.4663, 0.4257, 0.3531, 0.3392, 0.4109, 0.5130, 0.5566, 0.5437, 0.5017, 0.4254, 0.3468, 0.4242, 0.5277, 0.5704, 0.5830, 0.5604, 0.4847, 0.3914, 0.4310, 0.5159, 0.5639, 0.5877, 0.5905, 0.5396, 0.5069, 0.4724, 0.4266, 0.3947, 0.3663, 0.3406, 0.3571, 0.3688, 0.5202, 0.4957, 0.4730, 0.4394, 0.4011, 0.4064, 0.3962, 0.3961, 0.5208, 0.5076, 0.5033, 0.4856, 0.4546, 0.4172, 0.4481, 0.4328, 0.5145, 0.5062, 0.5157, 0.5150, 0.5091, 0.4890, 0.4517, 0.4296, 0.4981, 0.5012, 0.5121, 0.5223, 0.5363, 0.5408, 0.5211, 0.4242, 0.4821, 0.5006, 0.5054, 0.5153, 0.5335, 0.5479, 0.5493, 0.4801, 0.4926, 0.4948, 0.5026, 0.5198, 0.5387, 0.5520, 0.5468, 0.4459, 0.4844, 0.4909, 0.4908, 0.5023, 0.5347, 0.5430, 0.4006, 0.4757, 0.4819, 0.4812, 0.4852, 0.4974, 0.5136, 0.5286, 0.3914, 0.4512, 0.4668, 0.4660, 0.4700, 0.4776, 0.4920, 0.5075, 0.3612, 0.4071, 0.4472, 0.4477, 0.4514, 0.4604, 0.4720, 0.4899, 0.3374, 0.3480, 0.3998, 0.4253, 0.4364, 0.4459, 0.4583, 0.4779, 0.2768, 0.2736, 0.3477, 0.3933, 0.4178, 0.4325, 0.4478, 0.4665, 0.2372, 0.1949, 0.2854, 0.3586, 0.3984, 0.4201, 0.4380, 0.4593, 0.2059, 0.1516, 0.2268, 0.3207, 0.3808, 0.4118, 0.4303, 0.4527, 0.1816, 0.1392, 0.1844, 0.2823, 0.3609, 0.4015, 0.4242, 0.4451, 0.2059, 0.1409, 0.1375, 0.2388, 0.3316, 0.3902, 0.4156, 0.4365, 0.2153, 0.1617, 0.1357, 0.2025, 0.2994, 0.3679, 0.4038, 0.4219, 0.2213, 0.1797, 0.1543, 0.1702, 0.2618, 0.3371, 0.3879, 0.4111, 0.2310, 0.1909, 0.1638, 0.1494, 0.2201, 0.3025, 0.3515, 0.3947, 0.2422, 0.1959, 0.1719, 0.1538, 0.1895, 0.2687, 0.3385, 0.3746, 0.2532, 0.2035, 0.1789, 0.1598, 0.1592, 0.2217, 0.3008, 0.3605, 0.2623, 0.2085, 0.1866, 0.1649, 0.1581, 0.1990, 0.2717, 0.3297, 0.2692, 0.2197, 0.1941, 0.1727, 0.1645, 0.1727, 0.2348, 0.3008, 0.2702, 0.2250, 0.2011, 0.1798, 0.1729, 0.1702, 0.2126, 0.2780, 0.2763, 0.2330, 0.2067, 0.1879, 0.1807, 0.1744, 0.1870, 0.2435, 0.2796, 0.2367, 0.2114, 0.1914, 0.1887, 0.1826, 0.1847, 0.2331, 0.2817, 0.2343, 0.2077, 0.2031, 0.1961, 0.1925, 0.1850, 0.2013, 0.2825, 0.2350, 0.2078, 0.2061, 0.1999, 0.1975, 0.1908, 0.2070, 0.2865, 0.2321, 0.2202, 0.2082, 0.2028, 0.2007, 0.2029, 0.2125, 0.2878, 0.2341, 0.2193, 0.2089, 0.2049, 0.2011, 0.2167, 0.2189, 0.2899, 0.2405, 0.2228, 0.2114, 0.2061, 0.2035, 0.2222, 0.2247, 0.2940, 0.2481, 0.2248, 0.2128, 0.2075, 0.2210, 0.2252, 0.2298, 0.2985, 0.2490, 0.2255, 0.2129, 0.2094, 0.2239, 0.2287, 0.2340, 0.3078, 0.2532, 0.2275, 0.2140, 0.2247, 0.2266, 0.2317, 0.2373, 0.3109, 0.2554, 0.2317, 0.2150, 0.2253, 0.2288, 0.2324, 0.2396, 0.3103, 0.2565, 0.2321, 0.2157, 0.2282, 0.2300, 0.2352, 0.2406, 0.3177, 0.2586, 0.2332, 0.2158, 0.2297, 0.2306, 0.2370, 0.2582, 0.3162, 0.2612, 0.2339, 0.2160, 0.2301, 0.2318, 0.2519, 0.2641, 0.3251, 0.2637, 0.2348, 0.2164, 0.2305, 0.2314, 0.2566, 0.2675, 0.3235, 0.2667, 0.2359, 0.2167, 0.2298, 0.2325, 0.2584, 0.2700, 0.3271, 0.2701, 0.2388, 0.2180, 0.2295, 0.2322, 0.2591, 0.2692, 0.3279, 0.2732, 0.2406, 0.2192, 0.2310, 0.2316, 0.2596, 0.2704, 0.3402, 0.2759, 0.2445, 0.2206, 0.2312, 0.2314, 0.2596, 0.2712, 0.3440, 0.2775, 0.2475, 0.2225, 0.2308, 0.2312, 0.2596, 0.2715, 0.3457, 0.2795, 0.2488, 0.2256, 0.2305, 0.2312, 0.2593, 0.2714, 0.3476, 0.2804, 0.2507, 0.2276, 0.2310, 0.2307, 0.2592, 0.2713, 0.3512, 0.2837, 0.2529, 0.2331, 0.2311, 0.2298, 0.2580, 0.2704, 0.3560, 0.2881, 0.2581, 0.2357, 0.2464, 0.2305, 0.2574, 0.2692, 0.3618, 0.2922, 0.2616, 0.2551, 0.2329, 0.2299, 0.2569, 0.2687, 0.3641, 0.2969, 0.2718, 0.2457, 0.2339, 0.2304, 0.2555, 0.2672, 0.3691, 0.3033, 0.2700, 0.2465, 0.2353, 0.2307, 0.2473, 0.2654, 0.3822, 0.3058, 0.2710, 0.2467, 0.2358, 0.2286, 0.2466, 0.2657, 0.3912, 0.3059, 0.2707, 0.2456, 0.2355, 0.2288, 0.2431, 0.2620, 0.4012, 0.3066, 0.2693, 0.2468, 0.2350, 0.2284, 0.2261, 0.2578, 0.4181, 0.3096, 0.2687, 0.2463, 0.2337, 0.2273, 0.2241, 0.2537, 0.4017, 0.3151, 0.2684, 0.2436, 0.2326, 0.2245, 0.2233, 0.2473, 0.4195, 0.3136, 0.2695, 0.2433, 0.2313, 0.2239, 0.2209, 0.2368, 0.4409, 0.3206, 0.2726, 0.2437, 0.2300, 0.2225, 0.2188, 0.2272, 0.4632, 0.3285, 0.2764, 0.2447, 0.2313, 0.2221, 0.2184, 0.2189, 0.4875, 0.3375, 0.2815, 0.2473, 0.2314, 0.2217, 0.2181, 0.2174, 0.5102, 0.3467, 0.2868, 0.2508, 0.2331, 0.2224, 0.2180, 0.2159, 0.5342, 0.3573, 0.2924, 0.2544, 0.2352, 0.2237, 0.2186, 0.2158, 0.5566, 0.3678, 0.2978, 0.2583, 0.2380, 0.2254, 0.2196, 0.2170, 0.5753, 0.3778, 0.3026, 0.2621, 0.2410, 0.2275, 0.2210, 0.2177, 0.5912, 0.3864, 0.3069, 0.2659, 0.2440, 0.2299, 0.2228, 0.2187, 0.5372, 0.3935, 0.3107, 0.2695, 0.2471, 0.2322, 0.2248, 0.2201, 0.5437, 0.3989, 0.3133, 0.2727, 0.2502, 0.2346, 0.2263, 0.2245, 0.5502, 0.4027, 0.3062, 0.2741, 0.2527, 0.2370, 0.2312, 0.2262, 0.5547, 0.4043, 0.3057, 0.2650, 0.2540, 0.2296, 0.2297, 0.2279, 0.5594, 0.4056, 0.3125, 0.2639, 0.2543, 0.2296, 0.2342, 0.2292, 0.5636, 0.4054, 0.3103, 0.2619, 0.2536, 0.2289, 0.2350, 0.2303];
    let u1: Vec<f64> = vec![1.2909,1.1961,1.2359,1.3410,1.8119,1.6354,1.3417,1.1639,1.0994,1.1372,1.1439,1.2051,1.2100,1.2634,1.0287,1.0527,1.0690,1.0685,1.0225,1.0418,1.1282,1.0419,0.9929,0.9900,0.9915,1.0114,0.9887,0.9874,0.9795,0.9900,1.0100,1.0288,0.9579,0.9451,0.9109,0.9356,0.9697,0.9628,0.9745,0.9960,0.9493,0.8832,0.8767,0.9290,1.0004,0.9689,0.9622,0.9337,0.8817,0.8023,0.7959,0.9227,0.9513,0.9206,0.9249,0.8888,0.7666,0.7853,0.7919,0.8854,0.8576,0.8368,0.8103,0.6596,0.6636,0.6927,0.7226,0.7947,0.7579,0.7904,0.6455,0.5634,0.5788,0.6292,0.6634,0.7027,0.7247,0.6486,0.5439,0.4942,0.5176,0.5610,0.6163,0.6386,0.5965,0.5222,0.4296,0.4168,0.4529,0.5011,0.5649,0.5544,0.4976,0.3829,0.3434,0.3631,0.4078,0.4828,0.5181,0.4642,0.3668,0.3102,0.2940,0.3229,0.3969,0.4926,0.4325,0.3579,0.2889,0.2687,0.2612,0.3143,1.2826,1.1912,1.2343,1.3245,1.7208,1.5871,1.3201,1.1659,1.1114,1.1465,1.1505,1.2011,1.2030,1.2509,1.0360,1.0663,1.0824,1.0787,1.0295,1.0447,1.1249,1.0546,1.0009,0.9990,0.9997,1.0181,0.9931,0.9880,0.9661,0.9975,1.0153,1.0309,0.9598,0.9496,0.9134,0.9285,0.9675,0.9696,0.9797,1.0019,0.9531,0.8858,0.8605,0.9339,1.0056,0.9778,0.9685,0.9385,0.8850,0.8599,0.8118,0.9326,0.9652,0.9343,0.9309,0.8911,0.8343,0.8448,0.8311,0.8998,0.8732,0.8470,0.8149,0.7287,0.7309,0.7423,0.7518,0.8090,0.7693,0.7980,0.6581,0.5993,0.6114,0.6559,0.6819,0.7133,0.7320,0.6748,0.5642,0.4887,0.5188,0.5655,0.6194,0.6402,0.6219,0.5428,0.4391,0.4206,0.4567,0.4972,0.5598,0.5666,0.5078,0.3887,0.3402,0.3579,0.4016,0.4769,0.5308,0.4704,0.3630,0.3035,0.2812,0.3118,0.3906,0.4769,0.4300,0.3509,0.2769,0.2517,0.2435,0.3042,0.3685,0.3895,0.4372,0.4846,0.5084,0.5221,0.4723,0.4487,0.3279,0.3381,0.3753,0.4303,0.4859,0.4759,0.4665,0.4443,0.2995,0.2910,0.3129,0.3577,0.4166,0.4723,0.4326,0.4235,0.2916,0.2604,0.2626,0.2903,0.3363,0.3858,0.4373,0.4559,0.3023,0.2446,0.2292,0.2396,0.2636,0.3025,0.3470,0.4272,0.3267,0.2399,0.2089,0.2053,0.2164,0.2423,0.2755,0.3507,0.2489,0.2025,0.1859,0.1863,0.1998,0.2275,0.2702,0.4018,0.2654,0.2018,0.1764,0.1693,0.1933,0.2230,0.4770,0.2884,0.2131,0.1758,0.1621,0.1606,0.1709,0.1894,0.4573,0.3305,0.2355,0.1874,0.1618,0.1533,0.1567,0.1711,0.4670,0.3756,0.2632,0.2050,0.1710,0.1529,0.1496,0.1543,0.4705,0.4023,0.3037,0.2271,0.1819,0.1555,0.1442,0.1401,0.5016,0.4598,0.3449,0.2536,0.1959,0.1604,0.1394,0.1293,0.5324,0.5251,0.4001,0.2865,0.2125,0.1671,0.1390,0.1198,0.5624,0.5627,0.4622,0.3290,0.2315,0.1737,0.1390,0.1152,0.5833,0.5789,0.5138,0.3809,0.2581,0.1828,0.1400,0.1126,0.5718,0.5797,0.5608,0.4293,0.2946,0.1991,0.1448,0.1131,0.5595,0.5648,0.5678,0.4764,0.3390,0.2260,0.1569,0.1188,0.5456,0.5468,0.5505,0.5164,0.3955,0.2673,0.1783,0.1287,0.5290,0.5304,0.5360,0.5369,0.4429,0.3163,0.2160,0.1468,0.5120,0.5172,0.5218,0.5255,0.4834,0.3713,0.2551,0.1735,0.4951,0.5029,0.5081,0.5143,0.5098,0.4223,0.3054,0.2070,0.4794,0.4890,0.4942,0.5021,0.5037,0.4589,0.3558,0.2506,0.4649,0.4739,0.4802,0.4884,0.4913,0.4827,0.4014,0.2966,0.4534,0.4610,0.4666,0.4750,0.4776,0.4794,0.4341,0.3403,0.4416,0.4469,0.4539,0.4612,0.4642,0.4697,0.4574,0.3818,0.4307,0.4356,0.4421,0.4495,0.4508,0.4563,0.4547,0.4040,0.4152,0.4201,0.4253,0.4210,0.4244,0.4282,0.4350,0.4216,0.4083,0.4128,0.4179,0.4110,0.4136,0.4164,0.4229,0.4114,0.3987,0.4075,0.4013,0.4020,0.4036,0.4058,0.4071,0.3987,0.3928,0.3998,0.3952,0.3943,0.3947,0.3968,0.3842,0.3854,0.3859,0.3884,0.3870,0.3861,0.3862,0.3876,0.3720,0.3727,0.3783,0.3797,0.3801,0.3789,0.3785,0.3632,0.3609,0.3604,0.3704,0.3739,0.3741,0.3726,0.3710,0.3536,0.3502,0.3490,0.3622,0.3661,0.3704,0.3662,0.3495,0.3444,0.3402,0.3384,0.3539,0.3594,0.3596,0.3599,0.3454,0.3359,0.3347,0.3287,0.3484,0.3534,0.3540,0.3540,0.3345,0.3283,0.3229,0.3223,0.3381,0.3468,0.3494,0.3507,0.3276,0.3237,0.3148,0.2964,0.3339,0.3398,0.3425,0.3451,0.3216,0.3166,0.2945,0.2815,0.3217,0.3330,0.3374,0.3383,0.3174,0.3089,0.2821,0.2714,0.3181,0.3257,0.3309,0.3332,0.3115,0.3030,0.2727,0.2621,0.3100,0.3182,0.3237,0.3276,0.3079,0.2982,0.2674,0.2555,0.3022,0.3107,0.3176,0.3215,0.3014,0.2939,0.2603,0.2480,0.2895,0.3034,0.3089,0.3158,0.2969,0.2895,0.2553,0.2415,0.2783,0.2962,0.3011,0.3096,0.2930,0.2856,0.2506,0.2357,0.2712,0.2888,0.2964,0.3026,0.2892,0.2816,0.2466,0.2305,0.2653,0.2818,0.2894,0.2961,0.2847,0.2779,0.2424,0.2258,0.2488,0.2663,0.2760,0.2801,0.2757,0.2702,0.2357,0.2179,0.2340,0.2515,0.2605,0.2683,0.2438,0.2619,0.2288,0.2109,0.2188,0.2359,0.2458,0.2353,0.2559,0.2540,0.2222,0.2043,0.2047,0.2214,0.2217,0.2396,0.2448,0.2448,0.2162,0.1987,0.1929,0.2074,0.2160,0.2273,0.2331,0.2355,0.2013,0.1933,0.1814,0.1961,0.2039,0.2147,0.2210,0.2254,0.1953,0.1866,0.1741,0.1883,0.1943,0.2042,0.2093,0.2149,0.1949,0.1827,0.1678,0.1829,0.1872,0.1911,0.1983,0.2042,0.2084,0.1793,0.1605,0.1788,0.1821,0.1838,0.1887,0.1933,0.1994,0.1753,0.1692,0.1748,0.1786,0.1791,0.1796,0.1849,0.1893,0.1730,0.1622,0.1746,0.1754,0.1748,0.1740,0.1766,0.1800,0.1729,0.1534,0.1705,0.1721,0.1714,0.1701,0.1693,0.1730,0.1673,0.1437,0.1656,0.1687,0.1687,0.1669,0.1644,0.1663,0.1690,0.1324,0.1601,0.1648,0.1655,0.1631,0.1606,0.1593,0.1624,0.1211,0.1540,0.1605,0.1621,0.1602,0.1571,0.1549,0.1575,0.1087,0.1467,0.1561,0.1588,0.1573,0.1539,0.1510,0.1520,0.0964,0.1388,0.1512,0.1552,0.1543,0.1510,0.1474,0.1459,0.0852,0.1307,0.1460,0.1512,0.1512,0.1481,0.1442,0.1421,0.0748,0.1228,0.1408,0.1470,0.1479,0.1453,0.1411,0.1387,0.0949,0.1153,0.1355,0.1426,0.1444,0.1424,0.1383,0.1354,0.0883,0.1088,0.1306,0.1381,0.1406,0.1394,0.1357,0.1328,0.0823,0.1028,0.1272,0.1338,0.1368,0.1364,0.1334,0.1299,0.0777,0.0981,0.1231,0.1311,0.1331,0.1339,0.1303,0.1271,0.0734,0.0939,0.1182,0.1276,0.1295,0.1310,0.1282,0.1247,0.0697,0.0902,0.1151,0.1244,0.1262,0.1283,0.1258,0.1221];

    let (mut locgu, mut loctu): (usize, usize) = (0, 0);

    let locg: Vec<usize> = find_closest(&grav, logg);
    let loct: Vec<usize> = find_closest(&teff, tstar);

    for i in 0..locg.len()
    {
        for j in 0..loct.len()
        {
            if locg[i] == loct[j]
            {
                loctu = j;
                locgu = i
            } 
        }
    }

    (u1[locg[locgu]],u2[loct[loctu]])
}

fn find_closest(values: &Vec<f64>, value: f64) -> Vec<usize>
{
    let mut location: Vec<usize> = vec![];
    let mut mindiff: f64 = 1000000.0;
    let mut diffs: Vec<f64> = vec![];

    for i in 0..values.len()
    {
        diffs.push((values[i]-value).abs());
        if diffs[i] < mindiff { mindiff = diffs[i]; }
    }

    for i in 0..diffs.len()
    {
        if diffs[i] == mindiff
        {
            location.push(i);
        }
        
    }

    location
}