use libm::exp;
use crate::functions::PI;
use crate::iomf::read_response;

fn planck(wave: &Vec<f64>, temp: f64) -> Vec<f64>
{
    let c1: f64 = 3.7417749e-5;               // 2*m.pi*h*c**2
    let c2: f64 = 1.4387687;                   // h*c/k
    let (mut w, mut val): (f64, f64);
    let mut bbflux: Vec<f64> = vec![];

    for i in 0..wave.len() 
    {
        w = wave[i]/(10f64.powf(8.0));
        val = c2/w/temp;
        bbflux.push(c1/(w.powf(5.0) * (exp(val)-1.0)));
    }

    bbflux
}

fn trapz(x: &Vec<f64>, y: &Vec<f64>) -> f64
{
    let mut suma: f64 = 0.0;
    for i in 0..x.len()-1 { suma += (y[i] + y[i+1])/2.0*(x[i+1]-x[i]); }
    suma
}

pub fn shibayama(time: &Vec<f64>, lc: &Vec<f64>, teff: f64, rad: f64, flareterr: f64, respfile: &str, respctrl: bool) -> (f64, f64)
{
    let mut tim: Vec<f64> = vec![];
    let sigma: f64 = 5.670374419e-08; // W * m^-2 * K^-4
    let tflare: f64 = 10000.0+flareterr;
    let mut newlc: Vec<f64> = lc.clone();
    let (wave, response): (Vec<f64>, Vec<f64>) = {
        if respctrl { read_response(respfile) }
        else 
        { 
            (vec![4540.500736377025, 4637.702503681885, 4726.067746686303, 5070.692194403535, 5362.297496318115, 5521.354933726068, 5724.59499263623, 5768.842588581824, 5795.417135926536, 5813.22013341419, 5813.350082300962, 5831.250541453694, 5831.445464783851, 5840.541886857836, 5840.834271853071, 5849.99566837044, 5850.353027809061, 5859.644373213203, 5860.164168760288, 5861.171272632764, 5869.390539721043, 5870.4951052585975, 5880.078835657974, 5889.8899766092, 5908.115307978861, 5926.438101013601, 5926.957896560687, 5945.410638482197, 5946.515204019752, 5956.261370527592, 5974.681625227411, 5984.330330070172, 6002.815559213376, 6029.552542666552, 6056.09460278957, 6091.4731872130305, 6109.211210257299, 6135.720783158624, 6162.262843281642, 6188.772416182968, 6215.34696352768, 6250.7255479511405, 6286.071645152906, 6312.646192497617, 6339.155765398944, 6365.665338300269, 6392.23988564498, 6427.585982846747, 6462.964567270208, 6507.17967599411, 6560.2313090184525, 6604.478904964046, 6648.661526466256, 6692.844147968464, 6728.222732391925, 6772.47032833752, 6825.521961361865, 6878.573594386207, 6913.919691587976, 6966.938837390626, 7037.663519015855, 7108.355713419388, 7161.4073464437315, 7214.394005024691, 7249.7401022264585, 7285.15117387161, 7311.693233994629, 7338.235294117647, 7373.646365762799, 7409.02495018626, 7453.272546131855, 7497.455167634063, 7532.833752057524, 7594.7219093823105, 7647.773542406653, 7700.8901498743835, 7762.778307199169, 7815.797453001819, 7860.012561725721, 7895.326171705796, 7939.508793208005, 7992.495451788964, 8045.514597591614, 8116.271766438535, 8204.669496664646, 8284.198215368622, 8328.348349649139, 8399.040544052674, 8460.96118859915, 8531.685870224377, 8593.574027549164, 8628.887637529238, 8690.678333188946, 8734.828467469462, 8770.142077449536, 8814.292211730053, 8849.573334488434, 8884.854457246818, 8902.462531404315, 8937.711166941004, 8981.796326778132, 9025.848999393573, 9061.065147708568, 9087.412284501432, 9122.628432816426, 9166.648618210173, 9201.832279303473, 9236.983453175086, 9263.363077189639, 9280.906176903753, 9316.024863553668, 9351.111062981894, 9386.294724075198, 9421.413410725116, 9465.336134453783, 9482.81425972451, 9517.867971931042, 9561.758208438016, 9596.84440786624, 9623.094082994023, 9666.951832279303, 9693.169020185394, 9719.418695313178, 9754.504894741402, 9772.01550723382, 9789.526119726243, 9806.971757775274, 9841.960495538422, 9859.373646365764, 9885.655808715239, 9903.06895954258, 9938.057697305729, 9964.242397990125, 9981.688036039159, 10007.872736723555, 10034.089924629645, 10060.339599757428, 10077.622801697999, 10077.75275058477, 10095.16590141211, 10112.709001126224, 10130.122151953567, 10147.665251667677, 10165.143376938404, 10182.459066100666, 10182.653989430823, 10191.198128736032, 10208.80620289353, 10226.251840942565, 10226.349302607641, 10243.827427878368, 10261.305553149095, 10296.359265355626, 10313.772416182966, 10331.31551589708, 10357.727627133327, 10366.369228103613, 10383.912327817725, 10401.422940310145, 10436.639088625141, 10454.214675560945, 10471.822749718445, 10489.365849432557, 10506.908949146671, 10533.321060382916, 10559.668197175777, 10594.819371047388, 10638.872043662828, 10682.957203499956, 10718.173351814952, 10771.062548730833, 10841.624794247598, 10903.415489907304, 10956.304686823183, 11018.062895261199, 11097.461665078405, 11159.219873516417, 11229.782119033182, 11291.572814692889], vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003676470588235059, 0.008088235294117618, 0.016911764705882293, 0.025735294117646967, 0.04117647058823515, 0.05441176470588238, 0.07205882352941173, 0.09191176470588247, 0.11397058823529405, 0.138235294117647, 0.16911764705882348, 0.2044117647058824, 0.27279411764705874, 0.23088235294117643, 0.3058823529411765, 0.3566176470588235, 0.4227941176470589, 0.46029411764705885, 0.5044117647058823, 0.5397058823529411, 0.5926470588235294, 0.6676470588235295, 0.7294117647058824, 0.7801470588235294, 0.8352941176470589, 0.8904411764705883, 0.9058823529411765, 0.9080882352941178, 0.9102941176470589, 0.9147058823529413, 0.9147058823529413, 0.9169117647058824, 0.9169117647058824, 0.9213235294117648, 0.9235294117647059, 0.9235294117647059, 0.9279411764705883, 0.9279411764705883, 0.9279411764705883, 0.9323529411764706, 0.9323529411764706, 0.9345588235294118, 0.9367647058823529, 0.9389705882352941, 0.9433823529411766, 0.9433823529411766, 0.9433823529411766, 0.9455882352941176, 0.9500000000000001, 0.9522058823529412, 0.9544117647058824, 0.9544117647058824, 0.9544117647058824, 0.9566176470588236, 0.9566176470588236, 0.9588235294117647, 0.9566176470588236, 0.9566176470588236, 0.9610294117647059, 0.9632352941176471, 0.9654411764705882, 0.9698529411764706, 0.9720588235294119, 0.9764705882352942, 0.9764705882352942, 0.9786764705882354, 0.9808823529411765, 0.9830882352941177, 0.9897058823529412, 0.9919117647058824, 0.9919117647058824, 0.9941176470588236, 0.9919117647058824, 0.9919117647058824, 0.9897058823529412, 0.9897058823529412, 0.9941176470588236, 0.9963235294117647, 0.9963235294117647, 0.9941176470588236, 0.9941176470588236, 0.9985294117647059, 1.000735294117647, 1.0029411764705882, 1.000735294117647, 0.9963235294117647, 0.9941176470588236, 0.9919117647058824, 0.9897058823529412, 0.9852941176470589, 0.9808823529411765, 0.9764705882352942, 0.9698529411764706, 0.9632352941176471, 0.9544117647058824, 0.9455882352941176, 0.9345588235294118, 0.9257352941176471, 0.9147058823529413, 0.9036764705882353, 0.8904411764705883, 0.8816176470588235, 0.8727941176470588, 0.8573529411764707, 0.8397058823529412, 0.8286764705882353, 0.8132352941176471, 0.7955882352941177, 0.7823529411764706, 0.7625, 0.7426470588235294, 0.725, 0.7073529411764706, 0.6852941176470588, 0.6654411764705882, 0.6477941176470589, 0.6301470588235294, 0.6191176470588236, 0.6080882352941177, 0.5926470588235294, 0.5683823529411764, 0.5507352941176471, 0.5352941176470588, 0.5176470588235293, 0.4933823529411764, 0.4713235294117647, 0.4558823529411764, 0.4338235294117647, 0.4139705882352941, 0.39632352941176463, 0.3698529411764706, 0.37867647058823517, 0.36102941176470593, 0.35220588235294115, 0.3345588235294117, 0.325735294117647, 0.3125, 0.28823529411764703, 0.30147058823529405, 0.28161764705882353, 0.2772058823529411, 0.261764705882353, 0.2683823529411765, 0.2551470588235294, 0.24191176470588238, 0.22205882352941164, 0.2044117647058824, 0.19558823529411762, 0.1889705882352941, 0.175735294117647, 0.16691176470588243, 0.15588235294117647, 0.1470588235294117, 0.14044117647058818, 0.13602941176470595, 0.12720588235294106, 0.1183823529411765, 0.11176470588235299, 0.10073529411764692, 0.08749999999999991, 0.07867647058823524, 0.07205882352941173, 0.06323529411764706, 0.05441176470588238, 0.045588235294117485, 0.04117647058823515, 0.03235294117647047, 0.025735294117646967, 0.016911764705882293, 0.010294117647058787, 0.0014705882352941124, 0.0])
        }
    };

    let mut spec: Vec<f64> = planck(&wave,teff);
    let mut specflare: Vec<f64> = planck(&wave,tflare+flareterr);
    let (lmax, mut area, ener): (f64, f64, f64);
    let mut luminosity: Vec<f64> = vec![];

    for i in 0..spec.len() { spec[i] *= response[i]; specflare[i] *= response[i]; tim.push((time[i]-time[0])*24.0*60.0*60.0); }

    let (totalspec, totalflare): (f64, f64) = (trapz(&wave,&spec),trapz(&wave,&specflare));

    for i in 0..time.len() 
    { 
        if newlc[i] < 0.0 { newlc[i] = 0.0; }
        area = newlc[i]*PI*rad.powf(2.0)*totalspec/totalflare;    
        luminosity.push(area*sigma*tflare.powf(4.0));
    }
    
    lmax = luminosity.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b))*1e7;
    ener = trapz(&tim,&luminosity)*1e7;

    (ener, lmax)
}

pub fn footrad(amp: f64, teff: f64, respfile: &str, respctrl: bool) -> (f64, bool)
{
    let (wave, response): (Vec<f64>, Vec<f64>) = {
        if respctrl { read_response(respfile) }
        else 
        { 
            (vec![4540.500736377025, 4637.702503681885, 4726.067746686303, 5070.692194403535, 5362.297496318115, 5521.354933726068, 5724.59499263623, 5768.842588581824, 5795.417135926536, 5813.22013341419, 5813.350082300962, 5831.250541453694, 5831.445464783851, 5840.541886857836, 5840.834271853071, 5849.99566837044, 5850.353027809061, 5859.644373213203, 5860.164168760288, 5861.171272632764, 5869.390539721043, 5870.4951052585975, 5880.078835657974, 5889.8899766092, 5908.115307978861, 5926.438101013601, 5926.957896560687, 5945.410638482197, 5946.515204019752, 5956.261370527592, 5974.681625227411, 5984.330330070172, 6002.815559213376, 6029.552542666552, 6056.09460278957, 6091.4731872130305, 6109.211210257299, 6135.720783158624, 6162.262843281642, 6188.772416182968, 6215.34696352768, 6250.7255479511405, 6286.071645152906, 6312.646192497617, 6339.155765398944, 6365.665338300269, 6392.23988564498, 6427.585982846747, 6462.964567270208, 6507.17967599411, 6560.2313090184525, 6604.478904964046, 6648.661526466256, 6692.844147968464, 6728.222732391925, 6772.47032833752, 6825.521961361865, 6878.573594386207, 6913.919691587976, 6966.938837390626, 7037.663519015855, 7108.355713419388, 7161.4073464437315, 7214.394005024691, 7249.7401022264585, 7285.15117387161, 7311.693233994629, 7338.235294117647, 7373.646365762799, 7409.02495018626, 7453.272546131855, 7497.455167634063, 7532.833752057524, 7594.7219093823105, 7647.773542406653, 7700.8901498743835, 7762.778307199169, 7815.797453001819, 7860.012561725721, 7895.326171705796, 7939.508793208005, 7992.495451788964, 8045.514597591614, 8116.271766438535, 8204.669496664646, 8284.198215368622, 8328.348349649139, 8399.040544052674, 8460.96118859915, 8531.685870224377, 8593.574027549164, 8628.887637529238, 8690.678333188946, 8734.828467469462, 8770.142077449536, 8814.292211730053, 8849.573334488434, 8884.854457246818, 8902.462531404315, 8937.711166941004, 8981.796326778132, 9025.848999393573, 9061.065147708568, 9087.412284501432, 9122.628432816426, 9166.648618210173, 9201.832279303473, 9236.983453175086, 9263.363077189639, 9280.906176903753, 9316.024863553668, 9351.111062981894, 9386.294724075198, 9421.413410725116, 9465.336134453783, 9482.81425972451, 9517.867971931042, 9561.758208438016, 9596.84440786624, 9623.094082994023, 9666.951832279303, 9693.169020185394, 9719.418695313178, 9754.504894741402, 9772.01550723382, 9789.526119726243, 9806.971757775274, 9841.960495538422, 9859.373646365764, 9885.655808715239, 9903.06895954258, 9938.057697305729, 9964.242397990125, 9981.688036039159, 10007.872736723555, 10034.089924629645, 10060.339599757428, 10077.622801697999, 10077.75275058477, 10095.16590141211, 10112.709001126224, 10130.122151953567, 10147.665251667677, 10165.143376938404, 10182.459066100666, 10182.653989430823, 10191.198128736032, 10208.80620289353, 10226.251840942565, 10226.349302607641, 10243.827427878368, 10261.305553149095, 10296.359265355626, 10313.772416182966, 10331.31551589708, 10357.727627133327, 10366.369228103613, 10383.912327817725, 10401.422940310145, 10436.639088625141, 10454.214675560945, 10471.822749718445, 10489.365849432557, 10506.908949146671, 10533.321060382916, 10559.668197175777, 10594.819371047388, 10638.872043662828, 10682.957203499956, 10718.173351814952, 10771.062548730833, 10841.624794247598, 10903.415489907304, 10956.304686823183, 11018.062895261199, 11097.461665078405, 11159.219873516417, 11229.782119033182, 11291.572814692889], vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003676470588235059, 0.008088235294117618, 0.016911764705882293, 0.025735294117646967, 0.04117647058823515, 0.05441176470588238, 0.07205882352941173, 0.09191176470588247, 0.11397058823529405, 0.138235294117647, 0.16911764705882348, 0.2044117647058824, 0.27279411764705874, 0.23088235294117643, 0.3058823529411765, 0.3566176470588235, 0.4227941176470589, 0.46029411764705885, 0.5044117647058823, 0.5397058823529411, 0.5926470588235294, 0.6676470588235295, 0.7294117647058824, 0.7801470588235294, 0.8352941176470589, 0.8904411764705883, 0.9058823529411765, 0.9080882352941178, 0.9102941176470589, 0.9147058823529413, 0.9147058823529413, 0.9169117647058824, 0.9169117647058824, 0.9213235294117648, 0.9235294117647059, 0.9235294117647059, 0.9279411764705883, 0.9279411764705883, 0.9279411764705883, 0.9323529411764706, 0.9323529411764706, 0.9345588235294118, 0.9367647058823529, 0.9389705882352941, 0.9433823529411766, 0.9433823529411766, 0.9433823529411766, 0.9455882352941176, 0.9500000000000001, 0.9522058823529412, 0.9544117647058824, 0.9544117647058824, 0.9544117647058824, 0.9566176470588236, 0.9566176470588236, 0.9588235294117647, 0.9566176470588236, 0.9566176470588236, 0.9610294117647059, 0.9632352941176471, 0.9654411764705882, 0.9698529411764706, 0.9720588235294119, 0.9764705882352942, 0.9764705882352942, 0.9786764705882354, 0.9808823529411765, 0.9830882352941177, 0.9897058823529412, 0.9919117647058824, 0.9919117647058824, 0.9941176470588236, 0.9919117647058824, 0.9919117647058824, 0.9897058823529412, 0.9897058823529412, 0.9941176470588236, 0.9963235294117647, 0.9963235294117647, 0.9941176470588236, 0.9941176470588236, 0.9985294117647059, 1.000735294117647, 1.0029411764705882, 1.000735294117647, 0.9963235294117647, 0.9941176470588236, 0.9919117647058824, 0.9897058823529412, 0.9852941176470589, 0.9808823529411765, 0.9764705882352942, 0.9698529411764706, 0.9632352941176471, 0.9544117647058824, 0.9455882352941176, 0.9345588235294118, 0.9257352941176471, 0.9147058823529413, 0.9036764705882353, 0.8904411764705883, 0.8816176470588235, 0.8727941176470588, 0.8573529411764707, 0.8397058823529412, 0.8286764705882353, 0.8132352941176471, 0.7955882352941177, 0.7823529411764706, 0.7625, 0.7426470588235294, 0.725, 0.7073529411764706, 0.6852941176470588, 0.6654411764705882, 0.6477941176470589, 0.6301470588235294, 0.6191176470588236, 0.6080882352941177, 0.5926470588235294, 0.5683823529411764, 0.5507352941176471, 0.5352941176470588, 0.5176470588235293, 0.4933823529411764, 0.4713235294117647, 0.4558823529411764, 0.4338235294117647, 0.4139705882352941, 0.39632352941176463, 0.3698529411764706, 0.37867647058823517, 0.36102941176470593, 0.35220588235294115, 0.3345588235294117, 0.325735294117647, 0.3125, 0.28823529411764703, 0.30147058823529405, 0.28161764705882353, 0.2772058823529411, 0.261764705882353, 0.2683823529411765, 0.2551470588235294, 0.24191176470588238, 0.22205882352941164, 0.2044117647058824, 0.19558823529411762, 0.1889705882352941, 0.175735294117647, 0.16691176470588243, 0.15588235294117647, 0.1470588235294117, 0.14044117647058818, 0.13602941176470595, 0.12720588235294106, 0.1183823529411765, 0.11176470588235299, 0.10073529411764692, 0.08749999999999991, 0.07867647058823524, 0.07205882352941173, 0.06323529411764706, 0.05441176470588238, 0.045588235294117485, 0.04117647058823515, 0.03235294117647047, 0.025735294117646967, 0.016911764705882293, 0.010294117647058787, 0.0014705882352941124, 0.0])
        }
    };

    let tflare: f64 = 10000.0;
    let mut spec: Vec<f64> = planck(&wave,teff);
    let mut specflare: Vec<f64> = planck(&wave,tflare);
    let val: f64 = (amp*trapz(&wave,&spec)/trapz(&wave,&specflare)).powf(0.5);

    for i in 0..spec.len() { spec[i] *= response[i]; specflare[i] *= response[i]; }

    if val > 1.0
    {
        println!("Size of the flaring region probably bigger than the size of the stellar sphere, calculating solution for the point");
        (0.0, false)
    }
    else
    {
        ((val.asin()).to_degrees(),true)
    }

}